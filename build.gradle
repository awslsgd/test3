plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id "com.github.spotbugs" version "$spotbugspluginVersion"
}


group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenLocal()
    maven{url 'https://maven.aliyun.com/repository/public'}
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:$findsecbugspluginVersion"

}

tasks.named('test') {
    useJUnitPlatform()
}
tasks.withType(JavaCompile){
    options.encoding("utf-8")
}

apply from: "$rootDir/gradle/config/scripts/style.gradle"
apply from: "$rootDir/gradle/config/scripts/coverage.gradle"
coverage.excludePackages = [
]
coverage.excludeClasses = [
]
style.excludePackages = [
]
style.excludeClasses = [
]

spotbugs {
    toolVersion = "$spotbugsVersion"
    ignoreFailures = false
    showStackTraces = true
    showProgress = true
    effort = 'default'
    reportLevel = 'low'
    reportsDir = file("$buildDir/reports/spotbugs")
    maxHeapSize = '2g'
    extraArgs = [ '-nested:false' ]
    jvmArgs = [ '-Duser.language=en' ]
}

spotbugsTest {
    reports {
        html {
            stylesheet = 'fancy-hist.xsl'
        }
    }
}
spotbugsMain {
    reports {
        html {
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'

//编译时自动执行jacocoTestReport，生成报告；报告路径build/reports/jacoco/test/html/index.html
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'PACKAGE'
            includes = ['com.xxx.xxxx.*.controller',
                        'com.xxx.xxxx.*.service'
            ]
            limit {
                counter = 'BRANCH'
                minimum = 0.75
            }
            limit {
                counter = 'LINE'
                minimum = 0.75
            }
            limit {
                counter = 'METHOD'
                minimum = 0.75
            }
            limit {
                counter = 'CLASS'
                minimum = 0.100
            }
        }
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/common/**',
                                        '**/configuration/**',
                                        '**/exception/**',
                                        '**/filter/**',
                                        '**/dto/**',
                                        '**/entity/**',
                                        'com/xxx/xxx/Application.class',
            ])
        }))
    }
}

check.dependsOn jacocoTestCoverageVerification
